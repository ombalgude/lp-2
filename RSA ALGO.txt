import random

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def multiplicative_inverse(e, phi):
    d, x1, x2, y1 = 0, 0, 1, 1
    temp_phi = phi
    while e > 0:
        temp1 = temp_phi // e
        temp2 = temp_phi - temp1 * e
        temp_phi, e = e, temp2
        x, y = x2 - temp1 * x1, d - temp1 * y1
        x2, x1, d, y1 = x1, x, y1, y
    return d + phi if temp_phi == 1 else None

def generate_keypair(p, q):
    n = p * q
    phi = (p - 1) * (q - 1)
    e = random.randrange(2, phi)
    while gcd(e, phi) != 1:
        e = random.randrange(2, phi)
    d = multiplicative_inverse(e, phi)
    return ((e, n), (d, n))

def encrypt(pk, plaintext):
    key, n = pk
    return [(ord(char) ** key) % n for char in plaintext]

def decrypt(pk, ciphertext):
    key, n = pk
    return ''.join([chr((char ** key) % n) for char in ciphertext])

# Example usage
p = 17
q = 23
public, private = generate_keypair(p, q)
message = "hi"
encrypted = encrypt(public, message)
decrypted = decrypt(private, encrypted)

print("Public Key:", public)
print("Encrypted:", encrypted)
print("Decrypted:", decrypted)
